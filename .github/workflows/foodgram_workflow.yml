name: Foodgram CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Running a script to clone a repository
        uses: actions/checkout@v2
      - name: Set up Python and venv
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r backend/requirements.txt
      - name: Test with flake8
        run: |
          cd backend
          python -m flake8 .
  
  build_and_push_to_docker_hub:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
  
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo docker compose stop
            sudo docker compose rm backend --force
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/foodgram_backend
            rm .env
            touch .env
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            # docker-compose.yaml, nginx.conf, frontend folder must be uploaded to the server manually in advance
            sudo docker compose up -d --build

  set_up_django_app:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: executing remote ssh commands for manage.py commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo docker compose exec backend python manage.py makemigrations
            sudo docker compose exec backend python manage.py migrate
            sudo docker compose exec backend python manage.py write_ingredients
            sudo docker compose exec backend python manage.py write_tags
            sudo docker compose exec backend python manage.py collectstatic --no-input

  notify:
    name: Discord Notification
    needs: set_up_django_app
    runs-on: ubuntu-latest
    steps:
      - uses: fateyan/action-discord-notifier@v1
        with:
          message-title: New Commits Pushed to github
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}

